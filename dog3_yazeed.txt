#include "HX711.h"
#define DEBUG_LEVEL   1

/* 
Requirement:

- The program is an automatic dog feeder.
- It will accomodate 2 kinds of dogs:
- One is small and weighs 100g to 400g
- The second is large and weighs 600g to 900g
- The interval time before feeding the small dog is 50sec
- The interval time before feeding the large dog is 90sec
- The amount of food to give the small dog is 10g
- The amount of food to give the small dog is 30g
   
Equipment:
- Arduino ATMEGA2560 microcontroller
- Load Cell HX711
  wiring notes: 
  - red black white green <-- HX711 board left side wiring
- Servo motor
  wiring notes:
  - black,red,yellow: ground,5v,pin9
- passive buzzer 
- LED
  
*/

// how many dogs
#define DOGS 2
// how many load cells
#define LOADCELLS 2
/* 250 msec counter */
volatile unsigned long int timer_250ms=0;

// Time Intervals before dog feeding
int INTERVAL_TIME[DOGS] = { 50, 90 };
// Weight range of dog minimum
// float DOG_WEIGHT_MIN[DOGS] = { 0.1, 0.6 };
float DOG_WEIGHT_MIN[DOGS] = { 0.1, 0.1 };
// Weight range of dog maximum
// float DOG_WEIGHT_MAX[DOGS] = { 0.4, 0.9 };
float DOG_WEIGHT_MAX[DOGS] = { 99.1, 99.9 };
// Dog food weight
float DOG_FOOD_WEIGHT[DOGS]   = { 0.01, 0.03 };
// Last timer values tracker for each dog
unsigned long int timeLastDogCall[DOGS] { timer_250ms, timer_250ms};
// track if dog was around
int was_dog_there[DOGS] = { 0,0 };   // for tracking if the dog was there

// Load cell variables:
//    Calibration factor for the load cells
//    first for food, then for dog 
float CALIBRATION_FACTOR[LOADCELLS] = { 200000, 200000 };
float loadcell_reading[LOADCELLS] = { 0,0 };

/*

      The arduino ATMEGA2560 pins will be used to drive the other components:
         buzzer      pin          3  
         servo motor pin          8 
         250millisec counter pin 13 
         dog present pin         A2 

      Pins for load cells  */

int loadcell_dout[LOADCELLS] { 5,15 };     
int loadcell_clk[LOADCELLS]  { 4,14 };

HX711 hx711_load_cell[LOADCELLS] = { HX711(loadcell_dout[0], loadcell_clk[0] ), HX711( loadcell_dout[1], loadcell_clk[1] ) };

//HX711 hx711_load_cell_food( loadcell_dout[0], loadcell_clk[0] );
//HX711 hx711_load_cell_dog( loadcell_dout[1], loadcell_clk[1] );

int buzzer_state = 0;
unsigned long int last_value_buzzer_timer = 0;
unsigned long int last_value_dog_timer = 0;

// Create an interrupt service routine for output compare match 
ISR(TIMER1_COMPC_vect) { 
   timer_250ms += 1;
   TCNT1 = 0xF0BD; // assign TCNT1 = F0BD. Making a 250 millisecond counter
}

// Define an arduino setup function 
void setup() {
   #ifdef DEBUG_LEVEL
   Serial.begin(9600);
   #endif

   // Define a timer interrupt 
   // it will be triggered by timer 1 channel C every 250 millisecond
   DDRB = (1 << DDB7);     // set PB7 to output
   cli();                  // turn off interrupts
   TCCR1A = (1 << COM1C0); // set normal mode, and on compare match toggle OCXC
   TCCR1B = (1 << CS12) | (1 << CS10); // set the prescaler=CLK/1024 
   TCCR1C = 0;                         // set TCCR1C=0
   TIMSK1 = (1 << OCIE1C);             // interrupt on output compare match
   TCNT1 = 0xF0BD;                     // assign TCNT1 = F0BD. Count up to FFFF. 250 millisecond counter
   OCR1C = 0xFFFF;                     // set OCR1C to FFFF hex
   sei();                              // enable interrupts
   // Done setup timer interrupt and timer 1 channel C
   
   // For buzzer
   // Configure timer 3 channel C with output OC3C PE5
   DDRE  |= (1 << DDB5);                           // set PE5 to output
   TCCR3A = (1 << COM3C1)|(1 << WGM31);            // clear OC3C on compare match
   TCCR3B = (1 << WGM33)|(1 << WGM32)|(1 << CS32); //  prescalar = CLK/256, mode 14 fast PWM
   set_buzzer_count_period(0xFFFF);
   // Done buzzer
   
   // LED pin on PORTF pin 2
   // dog is present indicator
   DDRF = (1 << DDF2); 
   PORTF &= 0xFB;

   hx711_load_cell[0].set_scale(CALIBRATION_FACTOR[0]);  // Calibration Factor
   hx711_load_cell[0].tare();                            // set hx711_load_cell to 0
   hx711_load_cell[1].set_scale(CALIBRATION_FACTOR[1]);  // Calibration Factor
   hx711_load_cell[1].tare();                            // set the hx711_load_cell to 0
   
   
   // For servo 
   // Timer 4 channel C. OC4C Pin 8
   DDRH |= (1 << DDH5);                                 // Pin H5 to output
   TCCR4A = 0;
   TCCR4B = 0;
   TCCR4B = (1 << WGM43) | (1 << WGM42) | (1 << CS42);  // prescalar CLK/256, mode 14 fast PWM mode. 
   TCCR4A = (1 << COM4C1) | (1 << WGM41);               // clear OC4C on compare match
   TCNT4 = 0;    // BOTTOM value
   OCR4C = 0;    // duty cycle
   ICR4 = 1250;  // TOP value 50Hz or 20ms
   // Done servo
}

void set_buzzer_count_period(int value1) {
    if (value1==65535) {
        ICR3  = value1; OCR3C = 0; TCNT3 = 0;   
    } else {
        ICR3  = value1; OCR3C = value1 / 2; TCNT3 = 0;   
    }
}

// Define an arduino loop function
void loop() {
   loadcell_reading[0] = hx711_load_cell[0].get_units();
   loadcell_reading[1] = hx711_load_cell[1].get_units();
   #ifdef DEBUG_LEVEL
   Serial.print("buzzer_state=");
   Serial.print(buzzer_state);   
   Serial.print(" || loadcells=");
   Serial.print(loadcell_reading[0], 3);   
   Serial.print(" , ");
   Serial.print(loadcell_reading[1], 3);   
   Serial.print(" || timer_250ms= ");
   Serial.print(timer_250ms);
   Serial.print(" || lastTimerValueDog= ");
   Serial.print(timeLastDogCall[0]);
   Serial.print(" , ");
   Serial.print(timeLastDogCall[1]);
   Serial.print(" || present_Dog= ");
   Serial.print(was_dog_there[0]);
   Serial.print(" , ");
   Serial.print(was_dog_there[1]);
   Serial.print(" || OCR4C: ");
   Serial.println(OCR4C);
   #endif
   
   for (int dog = 0; dog < DOGS; dog++) {
      // Decision check if time to feed dog.
      if ( was_dog_there [1-dog] || (INTERVAL_TIME[dog] > timer_250ms/4 - timeLastDogCall[dog]/4  )  ) continue;
      // Activate buzzer sound to summon dog
      if ( !was_dog_there[dog] ) {
         if (!buzzer_state)   {
            buzzer_state = 1;
            // set buzzer to play a sound
            if (dog)
            set_buzzer_count_period( 600+ 600*((timer_250ms/4-INTERVAL_TIME[dog]-timeLastDogCall[0]/4 )%2) );
            else 
            set_buzzer_count_period( 10+ 100*( (timer_250ms/4-INTERVAL_TIME[dog]-timeLastDogCall[0]/4 )%5) );
            last_value_buzzer_timer = timer_250ms/4;
         } else {
            // wait for time to pass
            if (timer_250ms/4-last_value_buzzer_timer/4) buzzer_state = 0;
         } 
         
      } 
      
      // Is the dog there
      if ( DOG_WEIGHT_MIN[dog] <= loadcell_reading[0] && loadcell_reading[0] <= DOG_WEIGHT_MAX[dog]) {
         // turn off buzzer
         was_dog_there[dog] = 1;
         set_buzzer_count_period(0xFFFF);
      }
      
      if (was_dog_there[dog] ) {
         // activate servo, change angle to release food
         PORTF |= 0x04;   // turn on LED as dog is here
         switch(was_dog_there[dog]) {
            case 2:
               if (timer_250ms/4 - last_value_dog_timer/4 > 2) {
                  last_value_dog_timer = timer_250ms;
                  OCR4C = 0;
                  was_dog_there[dog] = 3;
               }
               break;
            case 3:
               if (timer_250ms/4 - last_value_dog_timer/4 > 2) {
                  last_value_dog_timer = timer_250ms;
                  OCR4C = 156;
                  was_dog_there[dog] = 2;
               }
               break;
            default:
               last_value_dog_timer = timer_250ms;
               OCR4C = 156;
               was_dog_there[dog] = 2;
               break;
         }
         
         if (loadcell_reading[1] >= DOG_FOOD_WEIGHT[dog]) {
            set_buzzer_count_period(0xFFFF);
            OCR4C = 0;   // return to original position
            timeLastDogCall[dog] = timer_250ms;   // save the time 
            was_dog_there[dog] = 0;
         }
      }
      
      // stop calling the dog after 5 mins
      if (((timer_250ms/4 - timeLastDogCall[dog]/4-INTERVAL_TIME[dog])> 3 ) && !was_dog_there[dog] ) {
         set_buzzer_count_period(0xFFFF);
         buzzer_state = 0;
         timeLastDogCall[dog] = timer_250ms;   // save the time
         PORTF &= 0xFB;   // LED = off
         OCR4C = 0; // move servo to start position
      }
   }
}

