#define DEBUG
/*
  Dog	Weight	Feeding	Food
  Type	Range	Intervals	Quantity
  Small	Between 100g to 400g	50 seconds	10g
  Large	Between 600g to 900g	90 seconds	30g

  This dog feeder accomodates two loadcells:
  4 pins of the HX711 board connect (listed in order top to bottom from right side of board) as:
  
  HX711 1
    GND - GND 
    DOUT - 15
    HX711 CLK - 14
    VCC - VCC
  HX711 2
    GND - GND 
    DOUT - 5
    HX711 CLK - 4
    VCC - VCC
*/
    
#include "HX711.h"  // Need to have library in arduino library folder

// Pin Mapping
#define SERVO_PIN   8
#define BUZZER_PIN  3
#define LED_COUNTER_PIN 13
#define LED_CALL_DOG  A0

// Pins for load cells
#define DOUT_FOOD   14
#define CLK_FOOD    15
#define DOUT_DOG    5
#define CLK_DOG     4

#define TIME_DOG1  50  // ***** controls the frequency of the dog call ************
#define TIME_DOG2  10
#define WEIGHT_DOG1_MIN 0.100
#define WEIGHT_DOG1_MAX 0.400
#define WEIGHT_FOOD1  0.01
#define WEIGHT_DOG2_MIN 0.600
#define WEIGHT_DOG2_MAX 0.900
#define WEIGHT_FOOD2  0.03

HX711 scale_food(DOUT_FOOD, CLK_FOOD);
HX711 scale_dog(DOUT_DOG,CLK_DOG);

/* time counter */
volatile unsigned long int count_time=0;

//Change this calibration factor as per load cell once it is found you many need to vary it in thousands
float scaleval_food = -800000;
float scaleval_dog  = -800000;
long int track_dog1_time = count_time;
long int track_dog2_time = count_time;
int music_state = 0;
unsigned long int music_count = 0, servo_dog_count = 0;
int dog_showed, dog_showed2 = 0;  // for tracking if the dog was there

//=============================================================================================
//                         SETUP
//=============================================================================================
void setup() {
  scale_dog.set_scale(scaleval_dog);   //set the calibration
  scale_food.set_scale(scaleval_food); //set the calibration
  scale_dog.tare();                    //set scale_dog to 0
  scale_food.tare();                   //set scale_food to 0
  
  //S E R V O - S E T U P    <-- pin 7 
  DDRH |= (1<<DDH4) | (1<<DDH5);  //setting pin#7 or PH4 as timmer output for 2 servos
                                  // <-- OC4B
  TCCR4A = 0;
  TCCR4B = 0;
  TCCR4A = (1<<COM4C1) | (1<<COM4B1)|(1<<WGM41); // setting the timmer register as it to clear OC1x on compare match
  TCCR4B = (1<<WGM43)|(1<<WGM42)|(1<<CS42); //setting FAST PWM mode/(mode#14) and prescalar set to clk/256 
  //  <-- timer4
  OCR4B = 0;  //initial duty cycle for timer4 channel B
  ICR4 = 1250; //TOP value set to 20ms or 50Hz of the timmer
  TCNT4 = 0;   //BOTTOM value set to 0 of the timmer
  // --> tmr 4,ch [BC], pin 7-8  pinout oc4b ph4 pin 7; oc4c ph5 pin 8

  // setup timer 1 ch C to increment count_time every 1 second
  DDRB = (1<<DDB7); //Make PB7 an output digital pin 
  cli(); //Disable interrupts 
  TCCR1A = (1<<COM1C0); //Normal mode toggle OC1C on compare match
  TCCR1B = (1<<CS12)|(1<<CS10); //Set prescaler clkio/1024 for T/C1
  TCCR1C = B00000000; //TCCR1C =0
  TIMSK1 = (1<<OCIE1C); //Enable Timer/Counter1, Output Compare C Match Interrupt 
  OCR1C = 0xFFFF; //Load FFFF into OCR1C 
  TCNT1 = 0xC2F7; //Load 49911 into TCNT1
  sei(); //Enable interrupts
  
  //Buzzer pin 3   --> tmr 3,ch c, pin 3  pinout oc3c, pe5 pin 3
  DDRE |= (1<<DDB5);                //setting pin#3(arduino) or PE5 as timer output for Buzzer
  TCCR3B = (1<<WGM33)|(1<<WGM32)|(1<<CS32); //setting FAST PWM mode/(mode#14) and prescalar set to clk/256 
  TCCR3A = (1<<COM3C1)|(1<<WGM31); // setting the timer register as it to clear OC1x on compare match
  //ICR3=0;OCR3C=0;TCNT3=0;
  ICR3=0;OCR3C=0;TCNT3=0;
  // --> tmr 3,ch c, pin 3  pinout oc3c, pe5 pin 3
  
  DDRF = (1<<DDF0); //Make PF0 an output digital pin 
  PORTF &= 0xFE;
  
  #ifdef DEBUG
  Serial.begin(9600);
  #endif
}

//=============================================================================================
//                         LOOP
//=============================================================================================
void loop() {
  double weight_dog = scale_dog.get_units();
  double weight_food = scale_food.get_units();
  #ifdef DEBUG
    Serial.print("Weight dog: ");
    Serial.print(weight_dog, 3);  //Up to 3 decimal points
    Serial.print(" kg  ::  food: ");
    Serial.print(weight_food, 3);  //Up to 3 decimal points

    Serial.print(" kg  ::   ");
    Serial.print("count_time: ");
    Serial.print(count_time);
    Serial.print("   track_dog1_time: ");
    Serial.print(track_dog1_time);
    Serial.print("   dog_showed: ");
    Serial.println(dog_showed);
  #endif
  
  if (!dog_showed2 && (count_time - track_dog1_time >= TIME_DOG1 ) ) {  // if true, then time to feed dog1
    // call the dog 
    if ( !dog_showed ) {
      PORTF |= 0x01;  // turn on LED_CALL_DOG
      if (music_state == 0)  {
        int note = (count_time - track_dog1_time-TIME_DOG1)*10 ;   // *** CONTROLS THE SOUND PLAYED FOR DOG1
        ICR3=note;OCR3C=note/2;TCNT3=0;
        music_state = 1;
        music_count = count_time;
      } else if (music_state == 1) {
        if (count_time-music_count > 0) music_state = 0;
      }     
    } 
    
    // check if dog shows up
    if ( weight_dog >= WEIGHT_DOG1_MIN && weight_dog <= WEIGHT_DOG1_MAX) {
      dog_showed = 1;
      int note = 0;  // reset the buzzer
      ICR3=note;OCR3C=note/2;TCNT3=0;
    }
    
    if (dog_showed ) {
      // move the servo 
      if (dog_showed == 1) {
        OCR4B = 78;
        dog_showed = 2;
        servo_dog_count = count_time;
      } else if (dog_showed == 2) {
        if (count_time - servo_dog_count > 2) {
          OCR4B = 0;
          dog_showed = 3;
          servo_dog_count = count_time;
        }
      } else if (dog_showed == 3) {
        if (count_time - servo_dog_count > 2) {
          OCR4B = 78;
          dog_showed = 2;
          servo_dog_count = count_time;
        }
      }
      
      if (weight_food >= WEIGHT_FOOD1) {
        int note = 0;  // reset the buzzer
        ICR3=note;OCR3C=note/2;TCNT3=0;
        OCR4B = 0;  // reset the servo pos
        track_dog1_time = count_time;  // reset the counter
        dog_showed = 0;
      }
    }
    
    // check if 5 sec passed
    if (!dog_showed && ( (count_time - track_dog1_time-TIME_DOG1)> 5 ) ) {
      int note = 0;
      ICR3=note;OCR3C=note/2;TCNT3=0;
      track_dog1_time = count_time;  // reset the counter
    }
  }
  else if (count_time - track_dog2_time >= TIME_DOG2) {  // if true, then time to feed dog2
    // call the dog 
    if ( !dog_showed2 ) {
      PORTF |= 0x01;  // turn on LED_CALL_DOG
      if (music_state == 0)  {
        int note = (9-(count_time - track_dog2_time-TIME_DOG2) )*10 ;  // *** CONTROLS THE SOUND PLAYED FOR DOG2
        ICR3=note;OCR3C=note/2;TCNT3=0;
        music_state = 1;
        music_count = count_time;
      } else if (music_state == 1) {
        if (count_time-music_count > 0) music_state = 0;
      }     
    } 
    
    // check if dog shows up
    if ( weight_dog >= WEIGHT_DOG2_MIN && weight_dog <= WEIGHT_DOG2_MAX) {
      dog_showed2 = 1;
      int note = 0;  // reset the buzzer
      ICR3=note;OCR3C=note/2;TCNT3=0;
    }
    
    if (dog_showed2 ) {
      // move the servo 
      if (dog_showed2 == 1) {
        OCR4B = 78;
        dog_showed2 = 2;
        servo_dog_count = count_time;
      } else if (dog_showed2 == 2) {
        if (count_time - servo_dog_count > 2) {
          OCR4B = 0;
          dog_showed2 = 3;
          servo_dog_count = count_time;
        }
      } else if (dog_showed2 == 3) {
        if (count_time - servo_dog_count > 2) {
          OCR4B = 78;
          dog_showed2 = 2;
          servo_dog_count = count_time;
        }
      }
      
      if (weight_food >= WEIGHT_FOOD2) {
        int note = 0;  // reset the buzzer
        ICR3=note;OCR3C=note/2;TCNT3=0;
        OCR4B = 0;  // reset the servo pos
        track_dog2_time = count_time;  // reset the counter
        dog_showed2 = 0;
      }
    }
    
    // check if 5 sec passed
    if (!dog_showed2 && ( (count_time - track_dog2_time-TIME_DOG2)> 5 ) ) {
      int note = 0;
      ICR3=note;OCR3C=note/2;TCNT3=0;
      track_dog2_time = count_time;  // reset the counter
    }
  } 

  else {
    OCR4B = 0; // set servo to neutral
    PORTF &= 0xFE;  // turn off LED_CALL_DOG
    ICR3=0;OCR3C=0;TCNT3=0;
  }
}
//=============================================================================================


ISR(TIMER1_COMPC_vect) { //Timer/Counter1, Output Compare C Match Interrupt
  TCNT1 = 0xC2F7; //Load 49911 into TCNT1
  count_time+=1;
}


